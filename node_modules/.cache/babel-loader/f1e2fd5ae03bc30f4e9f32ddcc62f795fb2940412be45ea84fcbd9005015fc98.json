{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\projects\\\\003-assignment(investment prediction)\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport NewInvestment from './components/Newinvestment';\nimport Header from './components/header';\nimport InvestmentForm from './components/investmentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dummy = {\n  id: 1,\n  current_savings: 1000,\n  yearly_savings: 15000,\n  intrest: 12,\n  duration: 5,\n  Total: 400,\n  InvestedCapital: 16000\n};\nfunction App() {\n  _s();\n  const [useInvestment, SetInvestment] = useState(Dummy);\n  // const calculateHandler = (userInput) => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  // let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  // const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  // const expectedReturn = +userInput['expected-return'] / 100;\n  // const duration = +userInput['duration'];\n  let storage = useInvestment.current_savings;\n  let currentSavings = Number(storage);\n  let againstorage = useInvestment.yearly_savings;\n  const yearlyContribution = Number(againstorage);\n  const intr = useInvestment.intrest;\n  const expectedReturn = intr / 100;\n  const duration = useInvestment.duration;\n  let InvestedCap = useInvestment.InvestedCapital;\n  let toll = useInvestment.Total;\n  let TotalIntrest = Number(toll);\n  const InitialInvestment = storage;\n  // console.log(againstorage)\n  //  console.log(typeof(currentSavings));\n  //  console.log(typeof(duration));\n  //  console.log(typeof(yearlyContribution));\n  //  console.log(typeof(expectedReturn));\n  //  console.log(typeof(TotalIntrest));\n  //  console.log(currentSavings);\n  //  console.log(storage);\n  //  console.log(typeof(currentSavings));\n  // console.log(\"expected duration is \"+ duration);\n  // console.log(\"expected currentsavings is \"+ currentSavings); // feel free to change the shape of this input object!\n  // console.log(\"expected yearly is \"+ yearlyContribution); // as mentioned: feel free to change the shape...\n  // console.log(\"expected return is \"+ expectedReturn);\n  // console.log(\"expected intr is \"+ intr);\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    againstorage = +yearlyContribution * i;\n    InvestedCap = currentSavings - yearlyInterest;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: Number(yearlyInterest).toFixed(2),\n      savingsEndOfYear: Number(currentSavings).toFixed(2),\n      yearlyContribution: Number(yearlyContribution).toFixed(2),\n      Total: currentSavings - storage - (yearlyContribution * i + 1),\n      con: console.log(againstorage),\n      InvestedCapital: Number(InvestedCap).toFixed(2)\n    });\n  }\n  //  console.log(yearlyData);\n  // do something with yearlyData ...\n  const AddInvestmenthandler = Investments => {\n    SetInvestment(Investments);\n    // console.log(useInvestment);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(NewInvestment, {\n      getInvestment: AddInvestmenthandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Savings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Interest (Year)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Interest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Invested Capital\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), yearlyData.map(val => /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: val.year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", val.savingsEndOfYear]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", val.yearlyInterest]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", val.Total]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", val.InvestedCapital]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0UIf8RZgTDuWzelsGw7384KW/qM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","logo","NewInvestment","Header","InvestmentForm","jsxDEV","_jsxDEV","Dummy","id","current_savings","yearly_savings","intrest","duration","Total","InvestedCapital","App","_s","useInvestment","SetInvestment","yearlyData","storage","currentSavings","Number","againstorage","yearlyContribution","intr","expectedReturn","InvestedCap","toll","TotalIntrest","InitialInvestment","i","yearlyInterest","push","year","toFixed","savingsEndOfYear","con","console","log","AddInvestmenthandler","Investments","children","fileName","_jsxFileName","lineNumber","columnNumber","getInvestment","className","map","val","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/projects/003-assignment(investment prediction)/01-starting-project/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport logo from './assets/investment-calculator-logo.png';\nimport NewInvestment from './components/Newinvestment';\nimport Header from './components/header';\nimport InvestmentForm from './components/investmentForm';\n\nconst Dummy={\n  id:1,\n  current_savings:1000,\n      yearly_savings:15000,\n      intrest:12,\n      duration:5,\n      Total:400,\n      InvestedCapital:16000\n}\nfunction App() {\n  const[useInvestment,SetInvestment]=useState(Dummy)\n  // const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    // let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    // const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    // const expectedReturn = +userInput['expected-return'] / 100;\n    // const duration = +userInput['duration'];\n    let storage=useInvestment.current_savings;\n    let currentSavings = Number(storage);\n    let againstorage=useInvestment.yearly_savings;\n    const yearlyContribution =Number(againstorage);\n    const intr=useInvestment.intrest;\n    const expectedReturn = intr /100;\n    const duration = useInvestment.duration;\n    let InvestedCap=useInvestment.InvestedCapital;\n    let toll=useInvestment.Total;\n    let TotalIntrest=Number(toll);\n    const InitialInvestment=storage;\n    // console.log(againstorage)\n  //  console.log(typeof(currentSavings));\n  //  console.log(typeof(duration));\n  //  console.log(typeof(yearlyContribution));\n  //  console.log(typeof(expectedReturn));\n  //  console.log(typeof(TotalIntrest));\n  //  console.log(currentSavings);\n  //  console.log(storage);\n  //  console.log(typeof(currentSavings));\n    // console.log(\"expected duration is \"+ duration);\n    // console.log(\"expected currentsavings is \"+ currentSavings); // feel free to change the shape of this input object!\n    // console.log(\"expected yearly is \"+ yearlyContribution); // as mentioned: feel free to change the shape...\n    // console.log(\"expected return is \"+ expectedReturn);\n    // console.log(\"expected intr is \"+ intr);\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      againstorage =+ yearlyContribution*i;\n      InvestedCap= currentSavings - yearlyInterest;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest:Number(yearlyInterest).toFixed(2),\n        savingsEndOfYear:Number(currentSavings).toFixed(2),\n        yearlyContribution:Number(yearlyContribution).toFixed(2),\n        Total:currentSavings - storage - (yearlyContribution * i+1),\n        con:console.log(againstorage),\n        InvestedCapital:Number(InvestedCap).toFixed(2),\n      });\n    }\n//  console.log(yearlyData);\n    // do something with yearlyData ...\n  const AddInvestmenthandler=(Investments)=>{\n    SetInvestment(Investments);\n    // console.log(useInvestment);\n}\n  return (\n    <div>\n     <Header></Header>\n      {/* <InvestmentForm></InvestmentForm> */}\n      <NewInvestment getInvestment={AddInvestmenthandler}></NewInvestment>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <table className=\"result\">\n        <thead>\n          <tr>\n            <th>Year</th>\n            <th>Total Savings</th>\n            <th>Interest (Year)</th>\n            <th>Total Interest</th>\n            <th>Invested Capital</th>\n          </tr>\n        </thead>\n        {\n          yearlyData.map((val)=>\n          (\n            <tbody>\n          <tr>\n            <td>{val.year}</td>\n            <td>${val.savingsEndOfYear}</td>\n            <td>${val.yearlyInterest}</td>\n            <td>${val.Total}</td>\n           \n            <td>${val.InvestedCapital}</td>\n           \n           \n          </tr>\n        </tbody>\n          ))\n        }\n        {/* <tbody>\n          <tr>\n            <td>YEAR NUMBER</td>\n            <td>TOTAL SAVINGS END OF YEAR</td>\n            <td>INTEREST GAINED IN YEAR</td>\n            <td>TOTAL INTEREST GAINED</td>\n            <td>TOTAL INVESTED CAPITAL</td>\n          </tr>\n        </tbody> */}\n      </table>\n      {/* {yearlyData.map((value)=>{\n        <>\n        <p>{value.year}</p>\n        <p>{value.savingsEndOfYear}</p>\n        <p>{value.yearlyContribution}</p>\n        <p>{value.yearlyInterest}</p>\n        </>\n      })} */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}